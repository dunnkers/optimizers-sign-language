{"version":3,"sources":["utils/inference.js","components/InferenceResults.js","components/InferenceRow.js","components/InferenceShowcase.js","components/ModelShowcase.js","models/CustomNet_labels.js","models/CustomNet.js","App.js","serviceWorker.js","index.js"],"names":["infer","model","session","tensor","a","start","Date","outputData","predict","end","time","getTime","output","gather","postprocess","probabilities","prediction","Column","Table","InferenceResults","props","top_n","probs","orderBy","map","prob","key","label","slice","dataSource","className","pagination","title","dataIndex","render","probability","span","min","max","step","value","toFixed","style","width","InferenceRow","initialInfResult","loading","useState","inferenceResult","setInferenceResult","imgSize","canvasElement","useRef","collapsed","setCollapsed","crop","loadImage","picture","base64data","maxWidth","canvas","cover","blueimg","current","console","warn","ctx","getContext","log","drawImage","image","result","setTimeout","useEffect","drawimg","RemoveButton","onClick","onRemove","type","icon","CloseCircleOutlined","InferenceButton","canInfere","tooltip","inferimg","disabled","color","CollapseButton","RightOutlined","DownOutlined","Item","actions","Meta","file","name","replace","description","avatar","ref","height","minWidth","margin","InferenceShowcase","pictures","setPictures","imageUploader","loadPictureFromUrl","url","fetch","then","response","blob","Promise","resolve","reject","filename","split","pop","File","startsWith","reader","FileReader","onloadend","onerror","readAsDataURL","pictureUrls","all","renderItem","removeImage","base64","display","onChange","files","pics","i","ModelShowcase","msg","success","feedback","state","setState","tf","modelFile","res","message","failure","background","textAlign","status","subTitle","children","child","React","cloneElement","img","tfImg","fromPixels","smalImg","resizeBilinear","resized","t4d","Array","from","dataSync","mean","sub","pow","div","size","sqrt","argMax","labels","length","push","Text","Typography","Paragraph","Link","App","p","process","href","CustomNet","code","src","alt","verticalAlign","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6a329ea0.chunk.js","sourcesContent":["export async function infer(model, session, tensor) {\n    const start = new Date();\n    const outputData = session.predict(tensor);\n    const end = new Date();\n    const time = (end.getTime() - start.getTime());\n    const output = outputData.gather(0);\n    const { probabilities, prediction } = model.postprocess(output);\n    return { time, probabilities, prediction }\n}","import React from 'react';\nimport { Slider, InputNumber, Row, Col, Table } from 'antd';\nimport orderBy from 'lodash.orderby';\nconst { Column } = Table;\n\nexport function InferenceResults(props) {\n  const { probabilities, prediction } = props;\n  const top_n = props.top_n || 10;\n  // attach label as `key` attribute to keep antd happy\n  const ordered = orderBy(probabilities, ['probability'], ['desc']);\n  const probs = ordered.map(prob => ({\n    key: prob.label,\n    ...prob\n  })).slice(0, top_n); // show only top n results\n  return (\n    <Table dataSource={probs} className='inference-results'\n      pagination={false}>\n      <Column title='Label' dataIndex='label' key='label' render={label => (\n        <>{label === prediction ? <b>{label}</b> : <span>{label}</span>}</>\n      )} />\n      <Column title='Probability' dataIndex='probability' key='probability'\n        render={probability => (\n          <Row>\n            <Col span={12}>\n              <Slider min={0} max={1} step={0.01}\n                value={probability.toFixed(3)} /></Col>\n            <Col span={4}>\n              <InputNumber min={0} max={1} step={0.01}\n                value={probability.toFixed(3)} style={{ width: '68px' }} /></Col>\n          </Row>\n        )} />\n    </Table>\n  );\n}","import { CloseCircleOutlined, DownOutlined, RightOutlined } from '@ant-design/icons';\nimport { Button, Empty, List, Row, Tooltip } from 'antd';\nimport loadImage from 'blueimp-load-image';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { infer } from '../utils/inference';\nimport { InferenceResults } from './InferenceResults';\n\nexport function InferenceRow(props) {\n  const initialInfResult = {\n    time: -1,\n    probabilities: [],\n    prediction: null,\n    loading: false\n  };\n  const [inferenceResult, setInferenceResult] = useState(initialInfResult);\n  const { imgSize } = props.model;\n  const canvasElement = useRef(null);\n  const [collapsed, setCollapsed] = useState(true);\n\n  // draw image to canvas\n  async function drawimg(crop) {\n    const blueimg = await loadImage(props.picture.base64data, {\n      maxWidth: props.model.imgSize,\n      crop: true,\n      canvas: true,\n      cover: true\n    })\n    if (!canvasElement.current) return console.warn('No canvas (drawimg)');\n    const ctx = canvasElement.current.getContext('2d');\n    if(crop) {\n      // resize to 256x256 so it can be center cropped\n      console.log(\"crop!\")\n      ctx.drawImage(blueimg.image, -16, -16, 256, 256)\n    } else {\n      ctx.drawImage(blueimg.image, 0, 0);\n    }\n    // setImageLoaded(true);\n  }\n\n  async function inferimg() {\n    setInferenceResult({ ...initialInfResult, loading: true });\n    const { session, model } = props;\n\n    // inference\n    if (!canvasElement.current) return console.warn('No canvas (inferimg)');\n\n    const tensor = model.tensor(canvasElement.current);\n    const result = await infer(model, session, tensor);\n    console.log('inference result', result);\n\n    // wait 500ms before showing result\n    setTimeout(() => {\n      setInferenceResult({ ...result, loading: false });\n    }, 750)\n  }\n\n  useEffect(() => { // Preprocess image\n    if (!props.picture.base64data) return;\n\n    drawimg(props.crop)\n    //.then(() => props.session && inferimg());\n  }, [props.picture.base64data, props.model.imgSize, props.session]);\n\n  const RemoveButton = () => (\n    <Tooltip title='Remove picture'>\n      <Button onClick={() => props.onRemove()} type='text'\n        icon={<CloseCircleOutlined />} />\n    </Tooltip>\n  );\n\n  const { loading, time, probabilities, prediction } = inferenceResult;\n  const InferenceButton = () => {\n    const canInfere = !props.session || !props.picture.base64data;\n    let tooltip = 'Perform inference';\n    if (!props.session) tooltip = 'No model session available';\n    if (!props.picture.base64data) tooltip = 'No image loaded';\n    return (\n      <>\n        <Row>\n          <Tooltip title={tooltip}>\n            <Button onClick={() => inferimg()} loading={loading}\n              disabled={canInfere} >\n              Inference\n            </Button>\n          </Tooltip>\n        </Row>\n        <Row>\n          <small style={{ color: '#ccc' }}>\n            {time !== -1 ? `Inference took ${time}ms` : <>&nbsp;</>}\n          </small>\n        </Row>\n      </>\n    )\n  };\n\n  const CollapseButton = () => {\n    if (collapsed)\n      return <Button onClick={() => setCollapsed(false)} type='text'\n        icon={<RightOutlined />} />\n    else\n      return <Button onClick={() => setCollapsed(true)} type='text'\n        icon={<DownOutlined />} />\n  }\n\n  return (\n    <List.Item actions={[<RemoveButton />, <InferenceButton />]}\n      className='App-picitem'>\n      <List.Item.Meta title={props.picture.file.name.replace('_', '-')}\n        description={`${imgSize} x ${imgSize}`}\n        avatar={props.picture.base64data ?\n          <canvas ref={canvasElement} width={imgSize} height={imgSize} \n          style={{ minWidth: 50, maxWidth: 140 }}/> :\n          <Empty description='Image could not be loaded'\n            style={{ margin: '20px' }} />}\n      />\n\n      <div className='ant-list-item-collapse'>\n        <CollapseButton />\n      </div>\n      <InferenceResults probabilities={probabilities} prediction={prediction}\n        top_n={collapsed ? 3 : 10} />\n    </List.Item>\n  );\n}","import React, { useState, useEffect, useRef } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport { List } from 'antd';\nimport { InferenceRow } from './InferenceRow';\n\nfunction InferenceShowcase(props) {\n  const [pictures, setPictures] = useState([]);\n  const imageUploader = useRef(null);\n\n  // Reads file on local server. Combination of readFile in \n  // `react-images-upload` and https://stackoverflow.com/a/20285053\n  const loadPictureFromUrl = url => fetch(url)\n    .then(response => response.blob())\n    .then(blob => new Promise((resolve, reject) => {\n      const { type } = blob;\n      const filename = url.split('/').pop();\n      const file = new File([blob], filename, { type });\n\n      // image loading failure. perhaps fetch returned a html/text blob, \n      // i.e. the image was not found\n      if (!type.startsWith('image')) {\n        console.warn(`Could not load picture \\`${file.name}\\` `+\n          `from url \\`${url}\\`.`);\n        resolve({ file, base64data: null }); // fail 'softly'. Don't reject.\n      }\n\n      // read the blob into a base64 image url\n      const reader = new FileReader()\n      reader.onloadend = () => resolve({\n        file,\n        base64data: reader.result\n      });\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    }));\n\n  // Load local images\n  useEffect(() => {\n    if (!props.pictureUrls) return;\n    Promise.all(props.pictureUrls.map(loadPictureFromUrl))\n      .then(setPictures);\n  }, [props.pictureUrls])\n\n  // On having uploaded images\n  const onUpload = (files, pictures) => {\n    // Zip: convert files [], pics [] arrays to [{file, base64data}, {...}]\n    const pics = files.map((file, i) => ({\n      file, base64data: pictures[i]\n    }));\n    \n    setPictures(pics);\n  };\n\n  // Removing an image from the list\n  const onRemove = picture => {\n    imageUploader.current.removeImage(picture.base64);\n  };\n\n  return (\n    <div>\n      <List className=\"App-piclist\" dataSource={pictures}\n          renderItem={picture => (\n          <InferenceRow picture={picture} onRemove={() => onRemove(picture)}\n              session={props.session}\n              model={props.model}\n              crop={props.crop} />\n          )}>\n      </List>\n      <div className=\"App-imgupload\"\n        // the component is either an (1) upload type of Showcase, or\n        // a (2) local image type of Showcase. It cannot be both; that mixes\n        // up the pictures array.\n        style={{\n          display: props.pictureUrls ? 'none' : 'inline'\n        }}>\n        <ImageUploader onChange={onUpload} ref={imageUploader} />\n      </div>\n    </div>\n  );\n}\n\nexport default InferenceShowcase;","import React, { useState, useEffect } from 'react';\nimport { Button, Result, Spin } from 'antd';\nimport InferenceShowcase from './InferenceShowcase';\nimport * as tf from '@tensorflow/tfjs';\n\nfunction ModelShowcase(props) {\n  const [state, setState] = useState({\n    msg: 'No model', loading: false, success: false, session: null,\n    feedback: 'Load the model to start making inferences.'\n  });\n\n  // Load model\n  useEffect(() => {\n    if (!state.loading) return; // was not initiated\n\n    tf.loadGraphModel(props.modelFile).then(session => {\n      console.log('Model successfully loaded.')\n\n      // wait 750ms before showing result\n      setTimeout(() => {\n        setState({\n          msg: `Model successfully loaded`,\n          feedback: 'TensorFlow.js is ready for live inferences.',\n          // loading: false,\n          success: true,\n          session\n        });\n      }, 750);\n    }, res => {\n      setState({\n        msg: 'Oops, model could not be loaded',\n        feedback: res.message,\n        loading: false,\n        failure: true\n      });\n      console.warn('Model failed to load', res)\n    });\n  }, [props.modelFile, state.loading]);\n\n  const { modelFile } = props;\n  const filename = modelFile && modelFile.replace(/^.*[\\\\/]/, '');\n\n  return (\n    <div style={{ background: 'white', margin: '50px 0' }}>\n      <div style={{textAlign: 'center'}}>\n        <div style={{margin: '10px', display: 'inline'}}>{filename}</div>\n        <Button onClick={() => setState({\n          msg: 'Loading...',\n          loading: true,\n          success: true\n        })} disabled={state.loading}>\n          Load model\n        </Button>\n        <Result\n          status={state.success ? 'success' : \n            (state.failure ? 'error' : 'info')}\n          title={state.msg}\n          subTitle={<code>{state.feedback}</code>}\n          icon={state.loading && <Spin style={{height: 72}} />}\n        />\n      </div>\n\n      {props.children && \n      (props.children.map ? props.children : [props.children])\n        .map((child, i) => {\n        if (child.type === InferenceShowcase)\n          return React.cloneElement(child, {\n            key: i,\n            session: state.session,\n            model: props.model,\n            crop: props.crop\n          });\n        return child;\n      })}\n    </div>\n  );\n}\n\nexport default ModelShowcase;","export default [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  'del',\n  'nothing',\n  'space'\n];\n","import labels from './CustomNet_labels';\nimport * as tf from '@tensorflow/tfjs';\n\nconst imgSize = 64;\nexport default {\n  imgSize,\n\n  tensor(img) {\n    const tfImg = tf.browser.fromPixels(img);\n    const smalImg = tf.image.resizeBilinear(tfImg, [64, 64]);\n    const resized = tf.cast(smalImg, 'float32');\n    let t4d = tf.tensor4d(Array.from(resized.dataSync()),[1,64,64,3])\n\n    // standardize\n    const mean = t4d.mean().dataSync();\n    t4d = t4d.sub(mean);                      // 0 mean\n    t4d.sub(mean).pow(2).div(t4d.size).sqrt() // divided by std dev.\n\n    return t4d;\n  },\n\n  postprocess(output) {\n    const probs = output.dataSync();\n    console.log('probs', probs);\n    const prediction=output.argMax().dataSync()[0];\n    console.log('prediction', labels[prediction]);\n    let probabilities = [];\n    for (let i = 0; i < probs.length; i++) {\n      probabilities.push({\n        probability: probs[i],\n        label: labels[i]\n      })\n    }\n    return { probabilities, prediction };\n  }\n}","import React from 'react';\nimport { Typography } from 'antd';\nimport './App.css';\nimport ModelShowcase from './components/ModelShowcase';\nimport InferenceShowcase from './components/InferenceShowcase';\nimport CustomNet from './models/CustomNet';\nconst { Text, Paragraph, Link } = Typography;\n\nfunction App() {\n  const p = process.env.PUBLIC_URL;\n\n  return (\n    <article className=\"App\">\n      <header className=\"App-header\">\n        <h1>Benchmarking Optimizers for Sign Language detection</h1>\n        <h4>\n          <Text type=\"secondary\">Using Deep Learning with Keras</Text>\n        </h4>\n      </header>\n      <Paragraph>Hey! Welcome to a live demonstration page of how our trained network performs. We trained a network on the ASL sign language <Link href='https://kaggle.com/grassknoted/asl-alphabet'>dataset</Link>, aiming to differentiate between 29 classes. We demonstrate the network trained using the <b>Adam</b> optimizer, which yielded reasonable validation classification performance; about 90% accuracy. A learning rate of 0.001 was used, all other hyperparameters were standard. Let's see how well it performs, in an interactive way. </Paragraph>\n      <ModelShowcase modelFile={p+'/adam/AdamOptimizer-NN.json'} model={CustomNet}>\n        <Paragraph>\n          Let's first test the model on images it has seen before, training images. It should be able to get these predicted correctly relatively easily.\n        </Paragraph>\n\n        <InferenceShowcase pictureUrls={[\n            p+'/asl_alphabet_test/A_1.jpg',\n            p+'/asl_alphabet_test/B_1.jpg',\n            p+'/asl_alphabet_test/C_1.jpg'\n          ]}/>\n\n        <Paragraph>Next, we can predict images using <b>unseen</b> data, test data. </Paragraph>\n\n        <InferenceShowcase pictureUrls={[\n            p+'/asl_alphabet_test/E_test.jpg',\n            p+'/asl_alphabet_test/F_test.jpg',\n            p+'/asl_alphabet_test/G_test.jpg',\n            p+'/asl_alphabet_test/H_test.jpg'\n          ]}/>\n        <Paragraph>Or optionally: upload your own images to predict! Try to make a clear photo and see whether our network is able to predict correctly.</Paragraph>\n\n        <InferenceShowcase/>\n      </ModelShowcase>\n\n      <Paragraph>This project uses <Link href='https://www.tensorflow.org/js'>TensorFlow.js</Link> to make live inferences in the browser. Our trained Keras model was converted using the <Text code>tfjs-converter</Text>, and then loaded up into this React.js application.</Paragraph>\n      \n      <Paragraph>Project built as part of the Deep Learning course <Text code>WMCS001-05</Text> taught at the University of Groningen. </Paragraph>\n      <Paragraph>\n        <small>\n          <Text type='secondary'>\n            &gt; All our code is available on&nbsp;\n            <Link href='https://github.com/dunnkers/optimizers-sign-language'>Github <img src={p+'/github32.png'} \n              alt='Github logo'\n              style={{width: 16, verticalAlign: 'text-bottom'}} />\n            </Link>\n          </Text>\n        </small>\n      </Paragraph>\n    </article>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}